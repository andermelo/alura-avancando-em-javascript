{"version":3,"sources":["../../app-es6/services/HttpService.js"],"names":["HttpService","res","ok","Error","statusText","url","fetch","then","_handlerErrors","json","dado","headers","application","method","body","JSON","stringify"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAAaA,W;;;;;;;mDAEMC,G,EAAK;AAChB,4BAAI,CAACA,IAAIC,EAAT,EAAa,MAAM,IAAIC,KAAJ,CAAUF,IAAIG,UAAd,CAAN;AACb,+BAAOH,GAAP;AACH;;;wCAEGI,G,EAAK;AAAA;;AAET,+BAAOC,MAAMD,GAAN,EACFE,IADE,CACG;AAAA,mCAAO,MAAKC,cAAL,CAAoBP,GAApB,CAAP;AAAA,yBADH,EAEFM,IAFE,CAEG;AAAA,mCAAON,IAAIQ,IAAJ,EAAP;AAAA,yBAFH,CAAP;;AAII;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACH;;;yCAEIJ,G,EAAKK,I,EAAM;AAAA;;AAEZ,+BAAOJ,MAAMD,GAAN,EAAW;AACdM,qCAAS,EAAC,gBAAiBC,cAAYH,IAA9B,EADK;AAEdI,oCAAQ,MAFM;AAGdC,kCAAMC,KAAKC,SAAL,CAAeN,IAAf;AAHQ,yBAAX,EAKNH,IALM,CAKD;AAAA,mCAAO,OAAKC,cAAL,CAAoBP,GAApB,CAAP;AAAA,yBALC,CAAP;;AAOA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEH","file":"HttpService.js","sourcesContent":["export class HttpService {\r\n\r\n    _handlerErrors(res) {\r\n        if (!res.ok) throw new Error(res.statusText);\r\n        return res;\r\n    }\r\n\r\n    get(url) {\r\n\r\n    return fetch(url)\r\n        .then(res => this._handlerErrors(res))\r\n        .then(res => res.json())\r\n\r\n        // return new Promise((resolve, reject) => {\r\n        //     let xhr = new XMLHttpRequest();\r\n\r\n        //     xhr.open('GET', url);\r\n\r\n        //     // Configurações\r\n    \r\n        //     xhr.onreadystatechange = () => {\r\n                \r\n        //         /*\r\n        //             0: requisição ainda nao iniciada\r\n        //             1: conexao com o servidor estabelicida\r\n        //             2: requisicao recebida\r\n        //             3: processando requisicao\r\n        //             4: requisicao concluida e a resposta esta pronta\r\n        //         */\r\n    \r\n        //         if(xhr.readyState == 4) {\r\n                    \r\n        //             if(xhr.status == 200){\r\n        //                 resolve(JSON.parse(xhr.responseText));\r\n        //             }else {\r\n        //                 reject(xhr.responseText);\r\n        //             }\r\n        //         }\r\n    \r\n        //     };\r\n    \r\n        //     xhr.send();\r\n        // });\r\n    }\r\n\r\n    post(url, dado) {\r\n        \r\n        return fetch(url, {\r\n            headers: {'Content-Type' : application/json},\r\n            method: 'post',\r\n            body: JSON.stringify(dado)\r\n        })\r\n        .then(res => this._handlerErrors(res))\r\n\r\n        // return new Promise((resolve, reject) => {\r\n\r\n        //     let xhr = new XMLHttpRequest();\r\n        //     xhr.open(\"POST\", url, true);\r\n        //     xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n        //     xhr.onreadystatechange = () => {\r\n\r\n        //         if (xhr.readyState == 4) {\r\n\r\n        //             if (xhr.status == 200) {\r\n\r\n        //                 resolve(JSON.parse(xhr.responseText));\r\n        //             } else {\r\n\r\n        //                 reject(xhr.responseText);\r\n        //             }\r\n        //         }\r\n        //     };\r\n        //     xhr.send(JSON.stringify(dado)); // usando JSON.stringify para converter objeto em uma string no formato JSON.\r\n        // });\r\n\r\n    }\r\n\r\n}\r\n\r\n"]}