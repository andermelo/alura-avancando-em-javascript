{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objetcStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACUA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAQ,Y;AAEVC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;oDAEsB;;AAEnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;;AAE/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AAEH,6BAJD;;AAMAR,wCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,oCAAG,CAAChB,UAAJ,EAAgB;AACZA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAU;AACzB,8CAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQL,UAAR;AAEH,6BAXD;;AAaAO,wCAAYW,OAAZ,GAAsB,aAAK;;AAEvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAf,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AAEH,6BAND;AAQH,yBA/BM,CAAP;AAgCH;;;kDAEoBtB,U,EAAY;;AAE7BH,+BAAO0B,OAAP,CAAe,iBAAS;;AAEpB,gCAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgD1B,WAAW2B,iBAAX,CAA6BD,KAA7B;AAChD1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAc,IAAf,EAApC;AAEH,yBALD;AAOH;;;sDAEuB;;AAEpB,4BAAI7B,UAAJ,EAAgB;AACZC;AACAD,yCAAa,IAAb;AACAmB,oCAAQC,GAAR,CAAY,qBAAZ;AACH;AAEJ","file":"ConnectionFactory.js","sourcesContent":["\r\n    const stores = ['negociacoes'];\r\n    const version = 4;\r\n    const dbName ='aluraframe';\r\n\r\n    let connection = null;\r\n    let close = null;\r\n\r\n    export class ConnectionFactory {\r\n\r\n        constructor() {\r\n            throw new Error('Não é Possível criar instancias de ConnectionFactory');\r\n        }\r\n\r\n        static getConnection() {\r\n\r\n            return new Promise((resolve, reject) => {\r\n\r\n                let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n                openRequest.onupgradeneeded = e => {\r\n\r\n                    ConnectionFactory._createStores(e.target.result);\r\n\r\n                };\r\n\r\n                openRequest.onsuccess = e => {\r\n\r\n                    if(!connection) {\r\n                        connection = e.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function(){\r\n                            throw new Error('Você nao pode fechar diretamente a conexão');\r\n                        };\r\n                    }\r\n                    resolve(connection);\r\n\r\n                };\r\n\r\n                openRequest.onerror = e => {\r\n\r\n                    console.log(e.target.error);\r\n                    \r\n                    reject(e.target.error.name);\r\n                \r\n                };\r\n\r\n            });\r\n        }\r\n\r\n        static _createStores(connection) {\r\n\r\n            stores.forEach(store => {\r\n\r\n                if(connection.objetcStoreNames.contains(store)) connection.deleteObjectStore(store);\r\n                connection.createObjectStore(store, {autoIncrement:true});\r\n\r\n            });\r\n\r\n        }\r\n        \r\n        static closeConnection(){\r\n\r\n            if (connection) {\r\n                close();\r\n                connection = null;\r\n                console.log('conexao fechada! :)')\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n"]}