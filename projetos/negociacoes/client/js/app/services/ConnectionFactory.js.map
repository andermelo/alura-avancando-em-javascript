{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objetcStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAW;;AAEhC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAQ,YAAd;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA;AAEI,qCAAc;AAAA;;AACV,kBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;AAJL;AAAA;AAAA,4CAM2B;;AAEnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,aAAK;;AAE/Bd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AAEH,qBAJD;;AAMAR,gCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,4BAAG,CAACf,UAAJ,EAAgB;AACZA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAU;AACzB,sCAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACH,6BAFD;AAGH;AACDE,gCAAQJ,UAAR;AAEH,qBAXD;;AAaAM,gCAAYW,OAAZ,GAAsB,aAAK;;AAEvBC,gCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAf,+BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AAEH,qBAND;AAQH,iBA/BM,CAAP;AAgCH;AAxCL;AAAA;AAAA,0CA0CyBrB,UA1CzB,EA0CqC;;AAE7BH,uBAAOyB,OAAP,CAAe,iBAAS;;AAEpB,wBAAGtB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgDzB,WAAW0B,iBAAX,CAA6BD,KAA7B;AAChDzB,+BAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAc,IAAf,EAApC;AAEH,iBALD;AAOH;AAnDL;AAAA;AAAA,8CAqD4B;;AAEpB,oBAAI5B,UAAJ,EAAgB;AACZC;AACAD,iCAAa,IAAb;AACAkB,4BAAQC,GAAR,CAAY,qBAAZ;AACH;AAEJ;AA7DL;;AAAA;AAAA;AAiEH,CA1EuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function (){\r\n\r\n    const stores = ['negociacoes'];\r\n    const version = 4;\r\n    const dbName ='aluraframe';\r\n\r\n    var connection = null;\r\n    var close = null;\r\n\r\n    return class ConnectionFactory {\r\n\r\n        constructor() {\r\n            throw new Error('Não é Possível criar instancias de ConnectionFactory');\r\n        }\r\n\r\n        static getConnection() {\r\n\r\n            return new Promise((resolve, reject) => {\r\n\r\n                let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n                openRequest.onupgradeneeded = e => {\r\n\r\n                    ConnectionFactory._createStores(e.target.result);\r\n\r\n                };\r\n\r\n                openRequest.onsuccess = e => {\r\n\r\n                    if(!connection) {\r\n                        connection = e.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function(){\r\n                            throw new Error('Você nao pode fechar diretamente a conexão');\r\n                        };\r\n                    }\r\n                    resolve(connection);\r\n\r\n                };\r\n\r\n                openRequest.onerror = e => {\r\n\r\n                    console.log(e.target.error);\r\n                    \r\n                    reject(e.target.error.name);\r\n                \r\n                };\r\n\r\n            });\r\n        }\r\n\r\n        static _createStores(connection) {\r\n\r\n            stores.forEach(store => {\r\n\r\n                if(connection.objetcStoreNames.contains(store)) connection.deleteObjectStore(store);\r\n                connection.createObjectStore(store, {autoIncrement:true});\r\n\r\n            });\r\n\r\n        }\r\n        \r\n        static closeConnection(){\r\n\r\n            if (connection) {\r\n                close();\r\n                connection = null;\r\n                console.log('conexao fechada! :)')\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    \r\n})();\r\n\r\n\r\n"]}