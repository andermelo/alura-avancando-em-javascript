{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","get","then","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","catch","console","log","erro","Error","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","negociacao","ConnectionFactory","getConnection","NegociacaoDAO","connection","dao","adiciona","error","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\r\n\r\n    constructor(){\r\n\r\n        this._http = new HttpService();\r\n\r\n    }\r\n\r\n    obterNegociacoesDaSemana() {\r\n            return this._http\r\n                .get('negociacoes/semana')\r\n                .then(negociacoes => {\r\n                    return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    throw new Error('Não foi possível obter as negociações da semana');\r\n                });           \r\n    }\r\n\r\n    obterNegociacoesDaSemanaAnterior() {\r\n            return this._http\r\n                .get('negociacoes/anterior')\r\n                .then(negociacoes => {\r\n                    return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    throw new Error('Não foi possível obter as negociações da semana anterior');\r\n                });         \r\n        \r\n    }\r\n\r\n    obterNegociacoesDaSemanaRetrasada() {\r\n            return this._http\r\n                .get('negociacoes/retrasada')\r\n                .then(negociacoes => {\r\n                    return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    throw new Error('Não foi possível obter as negociações da semana retrasada');\r\n                });             \r\n    }\r\n\r\n    obterNegociacoes() {\r\n\r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()\r\n        ]).then(periodos => {\r\n\r\n            let negociacoes = periodos\r\n                .reduce((dados, periodo) => dados.concat(periodo), []);\r\n\r\n            return negociacoes;\r\n\r\n        }).catch(erro => {\r\n            throw new Error(erro);\r\n        });\r\n\r\n    } \r\n\r\n    cadastra(negociacao) {\r\n\r\n        return ConnectionFactory\r\n                .getConnection()\r\n                .then(connection => new NegociacaoDAO(connection))\r\n                .then(dao => dao.adiciona(negociacao))\r\n                .then(() => 'negociacao adicionada com sucesso!')\r\n                .catch(error => {\r\n                    console.log(error);\r\n                    throw new Error('nao foi possivel adicionar negociacao')\r\n                });\r\n    }\r\n\r\n    lista() {\r\n\r\n        return ConnectionFactory\r\n                .getConnection()\r\n                .then(connection => new NegociacaoDAO(connection))\r\n                .then(dao => dao.listaTodos())\r\n                .catch(error => {\r\n                    console.log(error);\r\n                    throw new Error('Nao foi possivel obter as negociacoes :(')\r\n                })\r\n    }\r\n\r\n    apaga(){\r\n        \r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDAO(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(() => 'Negociacoes apagadas com sucesso')\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw new Error('nao foi possivel apagar as negociacoes')\r\n            })\r\n    }\r\n\r\n    importa(listaAtual){\r\n        \r\n        return this.obterNegociacoes()\r\n            .then(negociacoes => \r\n                negociacoes.filter(negociacao => \r\n                    !listaAtual.some(negociacaoExistente => \r\n                        negociacao.isEquals(negociacaoExistente)))\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw new Error('Nao foi possivel buscar negociacoes para importar');\r\n            })\r\n\r\n    }\r\n}\r\n"]}